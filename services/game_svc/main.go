package main

import (
	"context"
	"errors"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/dgrijalva/jwt-go"
	gorilla "github.com/gorilla/websocket"
	corsmid "github.com/iris-contrib/middleware/cors"
	jwtmid "github.com/iris-contrib/middleware/jwt"
	"github.com/iris-contrib/swagger"
	"github.com/iris-contrib/swagger/swaggerFiles"
	"github.com/kataras/iris"
	"github.com/kataras/iris/websocket"
	"google.golang.org/grpc"

	e "github.com/vincent-scw/gframe/events"
	"github.com/vincent-scw/gframe/game_svc/config"
	_ "github.com/vincent-scw/gframe/game_svc/docs" // docs is generated by Swag CLI
)

var upgrader = gorilla.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin:     func(r *http.Request) bool { return true },
}

var serverEvents = websocket.Namespaces{
	"default": websocket.Events{
		websocket.OnNamespaceConnected: func(nsConn *websocket.NSConn, msg websocket.Message) error {
			// with `websocket.GetContext` you can retrieve the Iris' `Context`.
			ctx := websocket.GetContext(nsConn.Conn)

			log.Printf("[%s] connected to namespace [%s] with IP [%s]",
				nsConn, msg.Namespace,
				ctx.RemoteAddr())
			return nil
		},
		websocket.OnNamespaceDisconnect: func(nsConn *websocket.NSConn, msg websocket.Message) error {
			log.Printf("[%s] disconnected from namespace [%s]", nsConn, msg.Namespace)
			return nil
		},
		"console": func(nsConn *websocket.NSConn, msg websocket.Message) error {
			log.Printf("[%s] sent: %s", nsConn, string(msg.Body))
			return nil
		},
	},
}

func main() {
	log.Println("Starting reception service...")

	app := iris.Default()

	jwtHandler := jwtmid.New(jwtmid.Config{
		ValidationKeyGetter: func(token *jwt.Token) (interface{}, error) {
			return []byte(config.GetJwtKey()), nil
		},
		SigningMethod: jwt.SigningMethodHS256,
	})

	cors := corsmid.New(corsmid.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "HEAD"},
		AllowedHeaders:   []string{"*"},
		AllowCredentials: true,
	})
	app.Use(cors)
	app.AllowMethods(iris.MethodOptions)

	app.Get("/health", func(ctx iris.Context) {
		ctx.Text("I am good.")
	})

	hub := newHub()
	go hub.run()

	srv := websocket.New(
		websocket.GorillaUpgrader(upgrader),
		serverEvents,
	)

	srv.OnConnect = func(c *websocket.Conn) error {
		log.Printf("[%s] connected to server.", c.ID())

		registerNewClient(hub, c)
		return nil
	}

	srv.OnDisconnect = func(c *websocket.Conn) {
		log.Printf("[%s] disconnected from the server.", c.ID())
	}

	context, cancel := context.WithCancel(context.Background())

	conn, err := grpc.Dial(config.GetBrokerRPC(), grpc.WithInsecure())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := e.NewUserReceptionClient(conn)

	api := app.Party("/api")
	player := api.Party("/user")
	player.Use(jwtHandler.Serve)
	{
		player.Post("/in", func(ctx iris.Context) {
			authToken := jwtHandler.Get(ctx)
			status := handleUserReception(context, client, authToken, e.User_In)
			ctx.StatusCode(status)
		})
		player.Post("/out", func(ctx iris.Context) {
			authToken := jwtHandler.Get(ctx)
			status := handleUserReception(context, client, authToken, e.User_Out)
			ctx.StatusCode(status)
		})
	}

	swConfig := &swagger.Config{
		URL: "http://localhost:8080/swagger/doc.json",
	}
	app.Get("/swagger/{any:path}", swagger.CustomWrapHandler(swConfig, swaggerFiles.Handler))

	app.Run(iris.Addr(config.GetPort()))
	sigterm := make(chan os.Signal, 1)
	signal.Notify(sigterm, syscall.SIGINT, syscall.SIGTERM)
	select {
	case <-context.Done():
		log.Println("terminating: context cancelled")
	case <-sigterm:
		log.Println("terminating: via signal")
	}
	cancel()
}

func handleUserReception(ctx context.Context, c e.UserReceptionClient, authToken *jwt.Token, status e.User_Status) int {
	user, err := getUserFromToken(authToken, status)
	if err != nil {
		return iris.StatusForbidden
	}

	switch status {
	case e.User_In:
		_, err = c.Checkin(ctx, user)
	case e.User_Out:
		_, err = c.Checkout(ctx, user)
	}

	if err != nil {
		log.Println(err)
		return iris.StatusInternalServerError
	}
	return iris.StatusNoContent
}

func getUserFromToken(token *jwt.Token, status e.User_Status) (*e.User, error) {
	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
		sub := claims["sub"].(string)
		// sid
		return &e.User{Id: sub, Name: sub, Status: status}, nil
	}

	return nil, errors.New("cannot read info from token")
}
