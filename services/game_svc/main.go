package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	corsmid "github.com/iris-contrib/middleware/cors"
	prometheusMiddleware "github.com/iris-contrib/middleware/prometheus"
	"github.com/iris-contrib/swagger"
	"github.com/iris-contrib/swagger/swaggerFiles"
	"github.com/kataras/iris"
	"github.com/kataras/iris/websocket"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	e "github.com/vincent-scw/gframe/contracts"
	"github.com/vincent-scw/gframe/game_svc/auth"
	"github.com/vincent-scw/gframe/game_svc/config"
	"github.com/vincent-scw/gframe/game_svc/connection"
	_ "github.com/vincent-scw/gframe/game_svc/docs" // docs is generated by Swag CLI
	"github.com/vincent-scw/gframe/game_svc/producer"
	"github.com/vincent-scw/gframe/game_svc/subscriber"
)

func main() {
	log.Println("Starting game service...")

	context, cancel := context.WithCancel(context.Background())

	playerProducer := producer.NewPlayerEventProducer()

	app := iris.Default()
	m := prometheusMiddleware.New("game_svc", 0.3, 1.2, 5.0)

	cors := corsmid.New(corsmid.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "HEAD"},
		AllowedHeaders:   []string{"*"},
		AllowCredentials: true,
	})
	app.Use(cors, m.ServeHTTP)
	app.AllowMethods(iris.MethodOptions)

	app.OnErrorCode(iris.StatusNotFound, func(ctx iris.Context) {
		// error code handlers are not sharing the same middleware as other routes, so we have
		// to call them inside their body.
		m.ServeHTTP(ctx)

		ctx.Writef("Not Found")
	})

	app.Get("/metrics", iris.FromStd(promhttp.Handler()))

	app.Get("/health", func(ctx iris.Context) {
		ctx.Text("I am good.")
	})

	hub := connection.NewHub()
	srv := connection.NewWebsocket(hub, func(conn *websocket.Conn, user *e.User) error {
		err := playerProducer.Emit(user)
		return err
	},
		func(conn *websocket.Conn, user *e.User) {
			playerProducer.Emit(user)
		})
	app.Get("/console", auth.WSJwtHandler.Serve, websocket.Handler(srv))

	startSubscribers(hub)

	api := app.Party("/api")
	player := api.Party("/user")
	player.Post("/register", func(ctx iris.Context) {
		var player auth.Player
		err := ctx.ReadJSON(&player)

		if err != nil {
			ctx.StatusCode(iris.StatusBadRequest)
			ctx.WriteString(err.Error())
			return
		}
		token := player.ToToken()
		ctx.JSON(token)
	})
	player.Use(auth.JwtHandler.Serve)
	{
		player.Post("/in", func(ctx iris.Context) {
			user, err := auth.GetUserFromToken(ctx, e.User_In)
			if err != nil {
				ctx.StatusCode(iris.StatusForbidden)
			}
			status := handleUserReception(playerProducer, user)
			ctx.StatusCode(status)
		})
		player.Post("/out", func(ctx iris.Context) {
			user, err := auth.GetUserFromToken(ctx, e.User_Out)
			if err != nil {
				ctx.StatusCode(iris.StatusForbidden)
			}
			status := handleUserReception(playerProducer, user)
			ctx.StatusCode(status)
		})
	}

	swConfig := &swagger.Config{
		URL: "http://localhost:8080/swagger/doc.json",
	}
	app.Get("/swagger/{any:path}", swagger.CustomWrapHandler(swConfig, swaggerFiles.Handler))

	app.Run(iris.Addr(config.GetPort()))
	sigterm := make(chan os.Signal, 1)
	signal.Notify(sigterm, syscall.SIGINT, syscall.SIGTERM)
	select {
	case <-context.Done():
		log.Println("terminating: context cancelled")
	case <-sigterm:
		log.Println("terminating: via signal")
	}
	cancel()
}

func handleUserReception(pep *producer.PlayerEventProducer, user *e.User) int {
	var err error
	switch user.Status {
	case e.User_In:
		err = pep.Emit(user)
	case e.User_Out:
		err = pep.Emit(user)
	}

	if err != nil {
		log.Println(err)
		return iris.StatusInternalServerError
	}
	return iris.StatusNoContent
}

func startSubscribers(hub *connection.Hub) {
	subs := subscriber.NewChannelSubscribers(
		subscriber.NewGroupSubscriber(hub),
	)
	subs.StartSubscribing()
}
