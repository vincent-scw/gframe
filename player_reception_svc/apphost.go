package main

import (
	"fmt"
	"log"

	"github.com/dgrijalva/jwt-go"
	jwtmid "github.com/iris-contrib/middleware/jwt"
	"github.com/iris-contrib/swagger"
	"github.com/iris-contrib/swagger/swaggerFiles"
	"github.com/kataras/iris"

	_ "github.com/vincent-scw/gframe/player_reception_svc/docs" // docs is generated by Swag CLI
	"github.com/vincent-scw/gframe/player_reception_svc/kafka"
)

func main() {
	app := iris.Default()

	jwtHandler := jwtmid.New(jwtmid.Config{
		ValidationKeyGetter: func(token *jwt.Token) (interface{}, error) {
			return []byte("00000000"), nil
		},
		SigningMethod: jwt.SigningMethodHS256,
	})

	// cors := corsmid.New(corsmid.Options{
	// 	AllowedOrigins:   []string{"*"},
	// 	AllowCredentials: true,
	// 	AllowedMethods:   []string{iris.MethodOptions, iris.MethodGet, iris.MethodPost, iris.MethodDelete, iris.MethodPut},
	// })
	app.AllowMethods(iris.MethodOptions)
	//app.Use(cors)

	app.Get("/health", func(ctx iris.Context) {
		ctx.Text("I am good.")
	})

	player := app.Party("/user")
	player.Use(jwtHandler.Serve)
	{
		player.Post("/in", func(ctx iris.Context) { ctx.Text("in") })
		player.Post("/out", func(ctx iris.Context) { ctx.Text("out") })
	}

	app.Post("message", func(ctx iris.Context) {
		var messages []kafka.TextMessage
		err := ctx.ReadJSON(&messages)
		if err != nil {
			log.Fatalln(err)
			ctx.StatusCode(iris.StatusBadRequest)
		}

		p := kafka.NewProducer()
		defer p.Dispose()
		for i := 0; i < len(messages); i++ {
			messages[i].Key = fmt.Sprintf("address-%s", ctx.RemoteAddr())
		}
		p.EmitMulti(messages)
	})

	config := &swagger.Config{
		URL: "http://localhost:8080/swagger/doc.json",
	}
	app.Get("/swagger/{any:path}", swagger.CustomWrapHandler(config, swaggerFiles.Handler))

	fmt.Println("Start player api...")
	app.Run(iris.Addr(":8080"))
}
